const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkShipments() {
  try {
    console.log('üöö Sipari≈ü/Kargo Kayƒ±tlarƒ± Kontrol Ediliyor...\n');

    // Toplam sipari≈ü sayƒ±sƒ±
    const totalOrders = await prisma.order.count();
    console.log(`üìä Toplam Sipari≈ü Sayƒ±sƒ±: ${totalOrders}`);

    // Kargo bilgisi olan sipari≈üler
    const ordersWithShipping = await prisma.order.findMany({
      where: {
        OR: [
          { trackingNumber: { not: null } },
          { shippingCompany: { not: null } },
          { status: { in: ['SHIPPED', 'DELIVERED'] } }
        ]
      },
      select: {
        id: true,
        trackingNumber: true,
        shippingCompany: true,
        status: true,
        total: true,
        guestName: true,
        guestSurname: true,
        guestEmail: true,
        createdAt: true,
        shippedAt: true,
        deliveredAt: true
      }
    });

    console.log(`üì¶ Kargo Bilgisi Olan Sipari≈ü Sayƒ±sƒ±: ${ordersWithShipping.length}`);

    // Test sipari≈üleri (test ile ba≈ülayan veya test i√ßeren)
    const testOrders = await prisma.order.findMany({
      where: {
        OR: [
          { trackingNumber: { contains: 'test', mode: 'insensitive' } },
          { guestName: { contains: 'test', mode: 'insensitive' } },
          { guestEmail: { contains: 'test', mode: 'insensitive' } },
          { shippingCompany: { contains: 'test', mode: 'insensitive' } }
        ]
      },
      select: {
        id: true,
        trackingNumber: true,
        shippingCompany: true,
        status: true,
        guestName: true,
        guestSurname: true,
        guestEmail: true,
        total: true,
        createdAt: true
      }
    });

    console.log(`üß™ Test Sipari≈ü Sayƒ±sƒ±: ${testOrders.length}`);

    // Ger√ßek sipari≈üler (test i√ßermeyen)
    const realOrders = await prisma.order.findMany({
      where: {
        AND: [
          { trackingNumber: { not: { contains: 'test', mode: 'insensitive' } } },
          { guestName: { not: { contains: 'test', mode: 'insensitive' } } },
          { guestEmail: { not: { contains: 'test', mode: 'insensitive' } } },
          { shippingCompany: { not: { contains: 'test', mode: 'insensitive' } } }
        ]
      },
      select: {
        id: true,
        trackingNumber: true,
        shippingCompany: true,
        status: true,
        guestName: true,
        guestSurname: true,
        guestEmail: true,
        total: true,
        createdAt: true
      }
    });

    console.log(`‚úÖ Ger√ßek Sipari≈ü Sayƒ±sƒ±: ${realOrders.length}\n`);

    // Test sipari≈ülerini listele
    if (testOrders.length > 0) {
      console.log('üß™ TEST Sƒ∞PARƒ∞≈ûLERƒ∞:');
      testOrders.forEach((order, index) => {
        const customerName = order.guestName && order.guestSurname 
          ? `${order.guestName} ${order.guestSurname}` 
          : order.guestName || 'Bilinmiyor';
        console.log(`${index + 1}. ID: ${order.id} | Takip: ${order.trackingNumber || 'Yok'} | M√º≈üteri: ${customerName} | Kargo: ${order.shippingCompany || 'Belirtilmemi≈ü'} | Durum: ${order.status} | Tutar: ${order.total}‚Ç∫ | Tarih: ${order.createdAt.toLocaleDateString('tr-TR')}`);
      });
      console.log('');
    }

    // Ger√ßek sipari≈üleri listele
    if (realOrders.length > 0) {
      console.log('‚úÖ GER√áEK Sƒ∞PARƒ∞≈ûLER:');
      realOrders.forEach((order, index) => {
        const customerName = order.guestName && order.guestSurname 
          ? `${order.guestName} ${order.guestSurname}` 
          : order.guestName || 'Bilinmiyor';
        console.log(`${index + 1}. ID: ${order.id} | Takip: ${order.trackingNumber || 'Yok'} | M√º≈üteri: ${customerName} | Kargo: ${order.shippingCompany || 'Belirtilmemi≈ü'} | Durum: ${order.status} | Tutar: ${order.total}‚Ç∫ | Tarih: ${order.createdAt.toLocaleDateString('tr-TR')}`);
      });
      console.log('');
    }

    // Durum bazƒ±nda daƒüƒ±lƒ±m
    const statusCounts = await prisma.order.groupBy({
      by: ['status'],
      _count: {
        status: true
      }
    });

    console.log('üìà DURUM BAZINDA DAƒûILIM:');
    statusCounts.forEach(status => {
      console.log(`   ${status.status}: ${status._count.status} sipari≈ü`);
    });

    // Kargo firmasƒ± bazƒ±nda daƒüƒ±lƒ±m
    const shippingCompanyCounts = await prisma.order.groupBy({
      by: ['shippingCompany'],
      _count: {
        shippingCompany: true
      },
      where: {
        shippingCompany: { not: null }
      }
    });

    console.log('\nüöö KARGO Fƒ∞RMASI BAZINDA DAƒûILIM:');
    shippingCompanyCounts.forEach(company => {
      console.log(`   ${company.shippingCompany}: ${company._count.shippingCompany} sipari≈ü`);
    });

  } catch (error) {
    console.error('‚ùå Hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkShipments(); 