// G√ºvenli Admin Hesabƒ± Olu≈üturma Script'i
// Bu script sadece prod√ºksiyonda √ßalƒ±≈ütƒ±rƒ±lmalƒ±!

const { PrismaClient } = require('@prisma/client')
const crypto = require('crypto')

const prisma = new PrismaClient()

// PBKDF2 ile ≈üifre hashleme (mevcut sistemle uyumlu)
function hashPassword(password) {
  const salt = crypto.randomBytes(32).toString('hex')
  const iterations = 10000
  const keylen = 64
  const digest = 'sha512'
  
  const hash = crypto.pbkdf2Sync(password, salt, iterations, keylen, digest).toString('hex')
  
  return {
    hash: `pbkdf2_sha512$${iterations}$${salt}$${hash}`,
    salt,
    iterations
  }
}

// G√º√ßl√º ≈üifre olu≈ütur
function generateSecurePassword() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?'
  let password = ''
  for (let i = 0; i < 16; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return password
}

async function createSecureAdmin() {
  try {
    console.log('üîê G√ºvenli Admin Hesabƒ± Olu≈üturuluyor...')
    
    // 1. Eski varsayƒ±lan hesabƒ± sil
    console.log('‚ùå Varsayƒ±lan admin hesabƒ± siliniyor...')
    await prisma.user.deleteMany({
      where: { 
        email: 'info@modabase.com.tr',
        role: 'ADMIN'
      }
    })
    
    // 2. Yeni g√ºvenli ≈üifre olu≈ütur
    const securePassword = generateSecurePassword()
    const hashedPassword = hashPassword(securePassword)
    
    // 3. Kullanƒ±cƒ±dan email adresi al
    console.log('\nüìß Yeni admin email adresinizi girin:')
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    })
    
    const adminEmail = await new Promise((resolve) => {
      readline.question('Admin Email: ', resolve)
    })
    
    const adminName = await new Promise((resolve) => {
      readline.question('Admin Adƒ±: ', resolve)
    })
    
    const adminSurname = await new Promise((resolve) => {
      readline.question('Admin Soyadƒ±: ', resolve)
    })
    
    const adminPhone = await new Promise((resolve) => {
      readline.question('Admin Telefon: ', resolve)
    })
    
    readline.close()
    
    // 4. Yeni g√ºvenli admin hesabƒ± olu≈ütur
    console.log('\n‚úÖ Yeni g√ºvenli admin hesabƒ± olu≈üturuluyor...')
    const newAdmin = await prisma.user.create({
      data: {
        email: adminEmail.toLowerCase().trim(),
        name: adminName,
        surname: adminSurname,
        phone: adminPhone,
        role: 'ADMIN',
        isActive: true,
        passwordHash: hashedPassword.hash
      }
    })
    
    console.log('\nüéâ G√ºvenli Admin Hesabƒ± Ba≈üarƒ±yla Olu≈üturuldu!')
    console.log('=' .repeat(50))
    console.log(`üìß Email: ${newAdmin.email}`)
    console.log(`üîë ≈ûifre: ${securePassword}`)
    console.log(`üë§ Kullanƒ±cƒ± ID: ${newAdmin.id}`)
    console.log('=' .repeat(50))
    console.log('\n‚ö†Ô∏è  Bu bilgileri g√ºvenli bir yerde saklayƒ±n!')
    console.log('‚ö†Ô∏è  ≈ûifreyi hemen deƒüi≈ütirmeniz √∂nerilir!')
    
    return {
      email: newAdmin.email,
      password: securePassword,
      id: newAdmin.id
    }
    
  } catch (error) {
    console.error('‚ùå Hata:', error.message)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Script'i √ßalƒ±≈ütƒ±r
if (require.main === module) {
  createSecureAdmin()
    .then(() => {
      console.log('\n‚úÖ ƒ∞≈ülem tamamlandƒ±!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Fatal Error:', error)
      process.exit(1)
    })
}

module.exports = { createSecureAdmin }
